version: "3.9"

services:
  db:
    image: postgres:15
    container_name: postgres
    command: ["postgres", "-c", "max_connections=9000"]
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: adv_platform
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: .
    container_name: api_backend
    depends_on:
      - db
    environment:
      POSTGRES_HOST: db
      POSTGRES_PORT: "5432"
      POSTGRES_USERNAME: postgres
      POSTGRES_PASSWORD: mypass
      POSTGRES_DATABASE: adv_platform
      SERVER_PORT: "8080"
      GPT_BASE: "REDACTED"
      MODERATE_ADS: false
      GPT_API_KEY: "REDACTED"
      AWS_KEY_ID: "REDACTED"
      AWS_ACCESS_KEY: "REDACTED"
      AWS_ENDPOINT_URL: "REDACTED"
    ports:
      - "8080:8080"
    command: >
      sh -c "uvicorn main:app --host REDACTED --port $$SERVER_PORT"
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/time/healthcheck || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - backend


  telegram_bot:
      build:
        context: .
        dockerfile: Dockerfile.bot
      container_name: telegram_bot
      depends_on:
        - backend   # Можно добавить db, если нужно
      environment:

        POSTGRES_HOST: db
        POSTGRES_PORT: "5432"
        POSTGRES_USERNAME: postgres
        POSTGRES_PASSWORD: mypass
        POSTGRES_DATABASE: adv_platform
        AWS_KEY_ID: "REDACTED"
        AWS_ACCESS_KEY: "REDACTED"
        AWS_ENDPOINT_URL: "REDACTED"
        BOT_TOKEN: "REDACTED"
      command: >
        sh -c "python bot_cli.py"

  e2e:
    build:
      context: .
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_healthy
    command: pytest --maxfail=1 --disable-warnings -q tests/e2e/e2e_first.py

