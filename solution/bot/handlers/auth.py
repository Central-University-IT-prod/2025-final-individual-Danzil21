import traceback
import uuid

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiohttp import ClientResponseError

from bot.database import Repo
from bot.keyboards import get_start_keyboard
from bot.keyboards.back import back_keyboard
from bot.states.auth import AuthState
from bot.utils.api_sdk import AdvertisingPlatformClient, AdvertiserUpsert

auth_router = Router()


@auth_router.callback_query(F.data == '/auth')
async def callback_auth(callback: CallbackQuery,
                        repo: Repo,
                        state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à UUID –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É", reply_markup=back_keyboard())
    await state.set_state(AuthState.waiting_for_uuid)


@auth_router.callback_query(F.data == '/register')
async def callback_auth(callback: CallbackQuery,
                        repo: Repo,
                        state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ", reply_markup=back_keyboard())
    await state.set_state(AuthState.waiting_for_login)


@auth_router.callback_query(F.data == '/logout')
async def callback_auth(callback: CallbackQuery,
                        repo: Repo,
                        state: FSMContext):
    await callback.answer('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', show_alert=True)
    user = await repo.get_user(user_id=callback.from_user.id)
    user.advertiser_id = None
    user.advertiser_name = None
    await repo.session.commit()
    await callback.message.edit_text("""‚ö°Ô∏è <b>PROD ADS ‚Äì –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞,
    –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞.</b>

    - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.
    - –õ–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.
    - –ü–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º.""",
                                     reply_markup=get_start_keyboard(user))


@auth_router.message(StateFilter(AuthState.waiting_for_uuid), F.text)
async def message_uuid_auth(message: Message, repo: Repo,
                            state: FSMContext, api_client: AdvertisingPlatformClient):
    uuid = message.text
    async with api_client as client:
        try:
            advertiser = await client.get_advertiser_by_id(uuid)
        except ClientResponseError as e:
            if e.status == 404:
                await message.answer(f"‚ùå –†–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å —Å UUID {uuid} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=back_keyboard())
                return
            elif e.status == 422:
                await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π UUID", reply_markup=back_keyboard())
                return
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞", reply_markup=back_keyboard())
            return
        except Exception as e:
            print(traceback.format_exc(e))
            await message.answer(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", reply_markup=back_keyboard())
            return
        else:
            user = await repo.get_user(user_id=message.from_user.id)
            print(advertiser)
            user.advertiser_id = advertiser.advertiser_id
            user.advertiser_name = advertiser.name
            await repo.session.commit()
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ {advertiser.name}")
            await message.answer("""‚ö°Ô∏è <b>PROD ADS ‚Äì –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞,
–∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞.</b>

- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.
- –õ–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.
- –ü–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º.""",
                                 reply_markup=get_start_keyboard(user))

@auth_router.message(StateFilter(AuthState.waiting_for_login), F.text)
async def message_uuid_auth(message: Message, repo: Repo,
                            state: FSMContext, api_client: AdvertisingPlatformClient):
    name = message.text
    adv_id = str(uuid.uuid4())
    async with api_client as client:
        try:
            advertiser = await client.upsert_advertisers(advertisers=[AdvertiserUpsert(name=name,
                                                                                       advertiser_id=adv_id)])
        except Exception as e:
            print(traceback.format_exc())
            await message.answer(f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞", reply_markup=back_keyboard())
            return
        else:
            user = await repo.get_user(user_id=message.from_user.id)
            print(advertiser)
            user.advertiser_id = adv_id
            user.advertiser_name = name
            await repo.session.commit()
            await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ {advertiser.name}")
            await message.answer("""‚ö°Ô∏è <b>PROD ADS ‚Äì –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞,
–∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –≤–∞—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è—Ö —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞.</b>

- –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏.
- –õ–µ–≥–∫–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥.
- –ü–æ–ª—É—á–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–º–ø–∞–Ω–∏—è–º.""",
                                 reply_markup=get_start_keyboard(user))
